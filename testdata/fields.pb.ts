// Generated by protod v0.1.0
import {
  JSON,
  boolField,
  bytesField,
  deserialize,
  doubleField,
  enumField,
  fixed32Field,
  fixed64Field,
  fromJSON,
  int32Field,
  int64Field,
  mapField,
  packedField,
  repeatedField,
  sfixed32Field,
  sfixed64Field,
  sint32Field,
  sint64Field,
  stringField,
  toBytes,
  toJSON,
  uint32Field,
  uint64Field,
} from "https://deno.land/x/protod@0.1.0/mod.ts";

export enum Enum {
  a = 0,
  b = 1,
  c = 2,
}

export class Sub {
  a: string;

  constructor(init: Partial<Sub>) {
    this.a = init.a ?? "";
  }

  static fromBytes(bytes: Uint8Array): Sub {
    const init: Partial<Sub> = {};
    for (const entry of deserialize(bytes)) {
      if (entry[0] === 1 && entry[1] === 2) {
        init.a = stringField.fromBytes(entry[2]);
      }
    }
    return new Sub(init);
  }

  static fromJSON(json: JSON): Sub {
    return new Sub(fromJSON<Sub>(json, {
      a: stringField,
    }));
  }

  toBytes(): Uint8Array {
    return toBytes<Sub>(this, {
      a: [1, stringField],
    });
  }

  toJSON() {
    return toJSON<Sub>(this, {
      a: stringField,
    });
  }
}

export class Fields {
  a: number;
  b: bigint;
  c: number;
  d: bigint;
  e: number;
  f: bigint;
  g: boolean;
  h: Enum;
  i: bigint;
  j: bigint;
  k: number;
  l: string;
  m: Uint8Array;
  n: Sub;
  o: number;
  p: number;
  q: Map<number, number>;
  r: Map<number, string>;
  s: Map<string, number>;
  t: Map<bigint, Enum>;
  u: bigint[];
  v: boolean[];
  w: string[];
  #y: string | void = undefined;
  get y(): string | void {
    return this.#y;
  }
  set y(value: string | void) {
    this.#y = value || "";
    this.#z = undefined;
  }
  #z: number | void = undefined;
  get z(): number | void {
    return this.#z;
  }
  set z(value: number | void) {
    this.#y = undefined;
    this.#z = value || 0;
  }

  constructor(init: Partial<Fields>) {
    this.a = init.a ?? 0;
    this.b = init.b ?? 0n;
    this.c = init.c ?? 0;
    this.d = init.d ?? 0n;
    this.e = init.e ?? 0;
    this.f = init.f ?? 0n;
    this.g = init.g ?? false;
    this.h = init.h ?? Enum.a;
    this.i = init.i ?? 0n;
    this.j = init.j ?? 0n;
    this.k = init.k ?? 0;
    this.l = init.l ?? "";
    this.m = init.m ?? new Uint8Array(0);
    this.n = init.n ?? new Sub({});
    this.o = init.o ?? 0;
    this.p = init.p ?? 0;
    this.q = init.q ?? new Map();
    this.r = init.r ?? new Map();
    this.s = init.s ?? new Map();
    this.t = init.t ?? new Map();
    this.u = init.u ?? [];
    this.v = init.v ?? [];
    this.w = init.w ?? [];
    if ("y" in init) {
      this.y = init.y ?? undefined;
    } else if ("z" in init) {
      this.z = init.z ?? undefined;
    }
  }

  static fromBytes(bytes: Uint8Array): Fields {
    const init: Partial<Fields> = {};
    for (const entry of deserialize(bytes)) {
      if (entry[0] === 1 && entry[1] === 0) {
        init.a = int32Field.fromBytes(entry[2]);
      } else if (entry[0] === 2 && entry[1] === 0) {
        init.b = int64Field.fromBytes(entry[2]);
      } else if (entry[0] === 3 && entry[1] === 0) {
        init.c = uint32Field.fromBytes(entry[2]);
      } else if (entry[0] === 4 && entry[1] === 0) {
        init.d = uint64Field.fromBytes(entry[2]);
      } else if (entry[0] === 5 && entry[1] === 0) {
        init.e = sint32Field.fromBytes(entry[2]);
      } else if (entry[0] === 6 && entry[1] === 0) {
        init.f = sint64Field.fromBytes(entry[2]);
      } else if (entry[0] === 7 && entry[1] === 0) {
        init.g = boolField.fromBytes(entry[2]);
      } else if (entry[0] === 8 && entry[1] === 0) {
        init.h = enumField(Enum).fromBytes(entry[2]);
      } else if (entry[0] === 9 && entry[1] === 1) {
        init.i = fixed64Field.fromBytes(entry[2]);
      } else if (entry[0] === 10 && entry[1] === 1) {
        init.j = sfixed64Field.fromBytes(entry[2]);
      } else if (entry[0] === 11 && entry[1] === 1) {
        init.k = doubleField.fromBytes(entry[2]);
      } else if (entry[0] === 12 && entry[1] === 2) {
        init.l = stringField.fromBytes(entry[2]);
      } else if (entry[0] === 13 && entry[1] === 2) {
        init.m = bytesField.fromBytes(entry[2]);
      } else if (entry[0] === 14 && entry[1] === 2) {
        init.n = Sub.fromBytes(entry[2]);
      } else if (entry[0] === 15 && entry[1] === 5) {
        init.o = fixed32Field.fromBytes(entry[2]);
      } else if (entry[0] === 16 && entry[1] === 5) {
        init.p = sfixed32Field.fromBytes(entry[2]);
      } else if (entry[0] === 17 && entry[1] === 2) {
        const map = (init.q = init.q || new Map());
        mapField(int32Field, int32Field)
          .fromBytes(entry[2])
          .forEach((v, k) => map.set(k, v));
      } else if (entry[0] === 18 && entry[1] === 2) {
        const map = (init.r = init.r || new Map());
        mapField(int32Field, stringField)
          .fromBytes(entry[2])
          .forEach((v, k) => map.set(k, v));
      } else if (entry[0] === 19 && entry[1] === 2) {
        const map = (init.s = init.s || new Map());
        mapField(stringField, int32Field)
          .fromBytes(entry[2])
          .forEach((v, k) => map.set(k, v));
      } else if (entry[0] === 20 && entry[1] === 2) {
        const map = (init.t = init.t || new Map());
        mapField(uint64Field, enumField(Enum))
          .fromBytes(entry[2])
          .forEach((v, k) => map.set(k, v));
      } else if (entry[0] === 21 && entry[1] === 2) {
        init.u = init.u || [];
        init.u.push(...packedField(uint64Field).fromBytes(entry[2]));
      } else if (entry[0] === 22 && entry[1] === 2) {
        init.v = init.v || [];
        init.v.push(...packedField(boolField).fromBytes(entry[2]));
      } else if (entry[0] === 23 && entry[1] === 2) {
        init.w = init.w || [];
        init.w.push(stringField.fromBytes(entry[2]));
      } else if (entry[0] === 25 && entry[1] === 2) {
        init.y = stringField.fromBytes(entry[2]);
      } else if (entry[0] === 26 && entry[1] === 0) {
        init.z = int32Field.fromBytes(entry[2]);
      }
    }
    return new Fields(init);
  }

  static fromJSON(json: JSON): Fields {
    return new Fields(fromJSON<Fields>(json, {
      a: int32Field,
      b: int64Field,
      c: uint32Field,
      d: uint64Field,
      e: sint32Field,
      f: sint64Field,
      g: boolField,
      h: enumField(Enum),
      i: fixed64Field,
      j: sfixed64Field,
      k: doubleField,
      l: stringField,
      m: bytesField,
      n: Sub,
      o: fixed32Field,
      p: sfixed32Field,
      q: mapField(int32Field, int32Field),
      r: mapField(int32Field, stringField),
      s: mapField(stringField, int32Field),
      t: mapField(uint64Field, enumField(Enum)),
      u: packedField(uint64Field),
      v: packedField(boolField),
      w: repeatedField(stringField),
      y: stringField,
      z: int32Field,
    }));
  }

  toBytes(): Uint8Array {
    return toBytes<Fields>(this, {
      a: [1, int32Field],
      b: [2, int64Field],
      c: [3, uint32Field],
      d: [4, uint64Field],
      e: [5, sint32Field],
      f: [6, sint64Field],
      g: [7, boolField],
      h: [8, enumField(Enum)],
      i: [9, fixed64Field],
      j: [10, sfixed64Field],
      k: [11, doubleField],
      l: [12, stringField],
      m: [13, bytesField],
      n: [14, this.n],
      o: [15, fixed32Field],
      p: [16, sfixed32Field],
      q: [17, mapField(int32Field, int32Field)],
      r: [18, mapField(int32Field, stringField)],
      s: [19, mapField(stringField, int32Field)],
      t: [20, mapField(uint64Field, enumField(Enum))],
      u: [21, packedField(uint64Field)],
      v: [22, packedField(boolField)],
      w: [23, repeatedField(stringField)],
      y: [25, stringField],
      z: [26, int32Field],
    });
  }

  toJSON() {
    return toJSON<Fields>(this, {
      a: int32Field,
      b: int64Field,
      c: uint32Field,
      d: uint64Field,
      e: sint32Field,
      f: sint64Field,
      g: boolField,
      h: enumField(Enum),
      i: fixed64Field,
      j: sfixed64Field,
      k: doubleField,
      l: stringField,
      m: bytesField,
      n: this.n,
      o: fixed32Field,
      p: sfixed32Field,
      q: mapField(int32Field, int32Field),
      r: mapField(int32Field, stringField),
      s: mapField(stringField, int32Field),
      t: mapField(uint64Field, enumField(Enum)),
      u: packedField(uint64Field),
      v: packedField(boolField),
      w: repeatedField(stringField),
      y: stringField,
      z: int32Field,
    });
  }
}

