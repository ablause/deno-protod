// Generated by protod v0.1.0
/**
 * This is a generic file comment
 */

import {
  JSON,
  deserialize,
  fromJSON,
  int32Field,
  stringField,
  toBytes,
  toJSON,
} from "https://deno.land/x/protod@0.1.0/mod.ts";

/**
 * This is a comment for MyRequest
 */
export class MyRequest {
  /**
   * This is a comment for path
   */
  path: string;

  constructor(init: Partial<MyRequest>) {
    this.path = init.path ?? "";
  }

  static fromBytes(bytes: Uint8Array): MyRequest {
    const init: Partial<MyRequest> = {};
    for (const entry of deserialize(bytes)) {
      if (entry[0] === 1 && entry[1] === 2) {
        init.path = stringField.fromBytes(entry[2]);
      }
    }
    return new MyRequest(init);
  }

  static fromJSON(json: JSON): MyRequest {
    return new MyRequest(fromJSON<MyRequest>(json, {
      path: stringField,
    }));
  }

  toBytes(): Uint8Array {
    return toBytes<MyRequest>(this, {
      path: [1, stringField],
    });
  }

  toJSON() {
    return toJSON<MyRequest>(this, {
      path: stringField,
    });
  }
}

/**
 * This is a comment for MyResponse
 */
export class MyResponse {
  /**
   * This is a comment for status
   */
  status: number;

  constructor(init: Partial<MyResponse>) {
    this.status = init.status ?? 0;
  }

  static fromBytes(bytes: Uint8Array): MyResponse {
    const init: Partial<MyResponse> = {};
    for (const entry of deserialize(bytes)) {
      if (entry[0] === 2 && entry[1] === 0) {
        init.status = int32Field.fromBytes(entry[2]);
      }
    }
    return new MyResponse(init);
  }

  static fromJSON(json: JSON): MyResponse {
    return new MyResponse(fromJSON<MyResponse>(json, {
      status: int32Field,
    }));
  }

  toBytes(): Uint8Array {
    return toBytes<MyResponse>(this, {
      status: [2, int32Field],
    });
  }

  toJSON() {
    return toJSON<MyResponse>(this, {
      status: int32Field,
    });
  }
}

